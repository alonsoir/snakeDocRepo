package com.aironman.core.pojos;
// Generated 13-mar-2012 12:28:15 by Hibernate Tools 3.2.1.GA

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import org.hibernate.validator.NotNull;

@Entity
@Table (name="Usuarios")
public class Usuario  implements java.io.Serializable {

     private static final long serialVersionUID = 1L;

     private String legajo;
     @NotNull
     private String nombre;
     @NotNull
     private String numeroCuenta;
     @NotNull
     private String email;
     @NotNull
     private String password;
     @NotNull
     private String passwordConfirmCart;
     @NotNull
     private String direccion;
     @NotNull
     private boolean status=false;
     private String lat;
     private String lon;
     //ahora guardo el pojo directamente, esto igual te trae problemas, pues es un objeto gestionado por hibernate
    //que pasa si actualizas el estado de este pojo fuera de este contexto?
     private static final List<Item> cart = new ArrayList<Item>();

    public Usuario() {
    }
	
    public Usuario(String legajo, String nombre, String numeroCuenta, String email, String direccion) {
        this.legajo = legajo;
        this.nombre = nombre;
        this.numeroCuenta = numeroCuenta;
        this.email = email;
        this.password = generatePassword();
        this.passwordConfirmCart=generatePassword();
        this.direccion = direccion;
    }
    
    public Usuario(String legajo, String nombre, String numeroCuenta, String email, String direccion, String lat, String lon) {
       this.legajo = legajo;
       this.nombre = nombre;
       this.numeroCuenta = numeroCuenta;
       this.email = email;
       this.password = generatePassword();
       this.passwordConfirmCart = generatePassword();
       this.direccion = direccion;
       this.lat = lat;
       this.lon = lon;
    }

    @Id
    public String getLegajo() {
        return this.legajo;
    }
    
    public void setLegajo(String legajo) {
        this.legajo = legajo;
    }
    public String getNombre() {
        return this.nombre;
    }
    
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public String getNumeroCuenta() {
        return this.numeroCuenta;
    }
    
    public void setNumeroCuenta(String numeroCuenta) {
        this.numeroCuenta = numeroCuenta;
    }
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getDireccion() {
        return this.direccion;
    }
    
    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }
    public String getLat() {
        return this.lat;
    }
    
    public void setLat(String lat) {
        this.lat = lat;
    }
    public String getLon() {
        return this.lon;
    }
    
    public void setLon(String lon) {
        this.lon = lon;
    }

    @Override
    public String toString() {
        return super.toString();
    }

    /**
     * @return the status
     */
    public boolean isStatus() {
        return status;
    }

    /**
     * @param status the status to set
     */
    public void setStatus(boolean status) {
        this.status = status;
    }
/**
     * @return the cart
     */
    public List<Item> getCart() {
        return cart;
    }
    
    public void deleteAllItems()
    {

        this.getCart().clear();
    }

    public boolean addItemToListaItems(com.aironman.core.pojos.Item item)
    {
        return this.getCart().add(item);
    }

    public boolean deleteItemFromList(Item item)
    {
        return this.getCart().remove(item);
    }
    /***
     * TODO esto habra que mejorarlo, pq necesitare acotar el pass generado a no demasiados caracteres
     * @return
     */
    private String generatePassword()
    {
        Random random=new Random();
        random.setSeed(new Date().getTime());
        String generatedPass= String.valueOf(random.nextInt());
        return generatedPass;

    }

    /**
     * @return the passwordConfirmCart
     */
    public String getPasswordConfirmCart() {
        return passwordConfirmCart;
    }

    /**
     * @param passwordConfirmCart the passwordConfirmCart to set
     */
    public void setPasswordConfirmCart(String passwordConfirmCart) {
        this.passwordConfirmCart = passwordConfirmCart;
    }
}


